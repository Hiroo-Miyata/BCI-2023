%% Linear Classifier Assignment

function rawOutput = preprocessing(trial,labels,fs, outlierIdx)
    %% Part 1b: Preprocessing
    
    %Cut trial into windows 
    windowLength = 160; %Window length in samples
    windowStride = 40; %How often to update the window in samples
    numOfWindows = 1+((size(trial,2)-windowLength)/windowStride);               %Calculate number of windows
    windows = [];                                                               
    for i = 1:numOfWindows
        windowStart = windowStride*(i-1) + 1;                                   %The start index of the windows. For 40ms shift this is: (1, 41, 81, etc.)
        windowEnd = windowStart+windowLength-1;
        windows(end+1,:,:) = trial(:,windowStart:windowEnd);
    end
    
    %% Part 2: 
      
    %Get electrode numbers from labels
    c3LaplacianLabels = ["Fc3", "C1", "C5", "Cp3"];                                     %The labels of electrodes in the Laplcaian filter for C3 (use lowercase letters after the first: Fcz)
    c3LaplacianNumbers = getIdxFromLabel(labels, c3LaplacianLabels, outlierIdx);
    c4Laplacia nLabels = ["Fc4", "C2", "C6", "Cp4"];
    c4LaplacianNumbers = getIdxFromLabel(labels, c4LaplacianLabels, outlierIdx);
    c3LaplacianLabels2 = ["F3", "Fc5", "T7", "Cp5", "P3", "Cp1", "Cz", "Fc1"];
    c3LaplacianNumbers2 = getIdxFromLabel(labels, c3LaplacianLabels2, outlierIdx);
    c4LaplacianLabels2 = ["F4", "Fc6", "T8", "Cp6", "P4", "Cp2", "Cz", "Fc2"];
    c4LaplacianNumbers2 = getIdxFromLabel(labels, c4LaplacianLabels2, outlierIdx);

    c3 = find(strcmp(labels,'C3'));
    c4 = find(strcmp(labels,'C4'));
    
    %Perform spatial filtering
    c3Filt = [];
    c4Filt = [];
    for windowNumber = 1:size(windows,1)
        currentWindow = squeeze(windows(windowNumber,:,:));

        % closest laplacian electrodes
        c3Filt(end+1,:) = currentWindow(c3,:) - mean(currentWindow(c3LaplacianNumbers,:),1);
        c4Filt(end+1,:) = currentWindow(c4,:) - mean(currentWindow(c4LaplacianNumbers,:),1);
        
        % far laplacian electrodes
        % c3Filt(end+1,:) = currentWindow(c3,:) - mean(currentWindow(c3LaplacianNumbers2,:),1);
        % c4Filt(end+1,:) = currentWindow(c4,:) - mean(currentWindow(c4LaplacianNumbers2,:),1);
    end

    c3alpha = [];
    c4alpha = [];

    if numOfWindows > 15
        startIdx = 7;
    else
        startIdx = 1;
    end
    for windowNumber = startIdx:size(windows)
        currentC3 = squeeze(c3Filt(windowNumber,:));
        currentC4 = squeeze(c4Filt(windowNumber,:));
        %Estimate power spectrum
        % The online decoder estimated frequencies from 0 to 30 Hz at intervals of every 0.2 Hz
        [spectrumC3,f] = pburg(currentC3, 16, [0:0.2:30], fs); %Use the Burg method with a 16th order model to estimate the power spectral density (PSD) from 0 to 30 Hz for each window of channels C3 and C4
        [spectrumC4,f] = pburg(currentC4, 16, [0:0.2:30], fs);
        %Sum points between 10.5 and 13.5 Hz
        c3alpha(end+1)=sum(spectrumC3(f>=10.5 & f<=13.5)); %Sum points between 10.5 and 13.5 Hz
        c4alpha(end+1)=sum(spectrumC4(f>=10.5 & f<=13.5));
    end

    rawOutput = sum([c3alpha; c4alpha],2);

end
    
    
    
    